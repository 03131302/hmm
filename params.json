{"name":"Hidden Markov Models Java Library","tagline":"","body":"## HMM abstractions in Java 8 \r\n\r\n[![Build Status](https://travis-ci.org/adrianulbona/hmm.svg)](https://travis-ci.org/adrianulbona/hmm)\r\n\r\nBesides the basic abstractions, a most probable state sequence solution is implemented based on the Viterbi algorithm.\r\n\r\n### How to use it:\r\n\r\n#### Getting the most probable sequence of states based on a sequence of observations:\r\n\r\n```java\r\nModel<MedicalState, Symptom> model = WikipediaViterbi.INSTANCE.model;\r\nList<Symptom> symptoms = asList(NORMAL, COLD, DIZZY);\r\nList<MedicalState> evolution = new MostProbableStateSequenceFinder<>(model).basedOn(symptoms);\r\n```\r\n\r\n#### How to define a model: \r\n\r\n```java\r\npublic enum WikipediaViterbi {\r\n\tINSTANCE;\r\n\r\n\tpublic final Model<MedicalState, Symptom> model;\r\n\r\n\tWikipediaViterbi() {\r\n\t\tmodel = new Model<>(probabilityCalculator(), reachableStatesFinder());\r\n\t}\r\n\r\n\tpublic enum MedicalState implements State {\r\n\t\tHEALTHY,\r\n\t\tFEVER;\r\n\t}\r\n\t\r\n\tpublic enum Symptom implements Observation {\r\n\t\tNORMAL,\r\n\t\tCOLD,\r\n\t\tDIZZY;\r\n\t}\r\n\t\r\n\tprivate ProbabilityCalculator<MedicalState, Symptom> probabilityCalculator() {\r\n\t\treturn new ProbabilityCalculator<>(StartProbabilities.INSTANCE.data::get,\r\n\t\t\t\tEmissionProbabilities.INSTANCE.data::get, \r\n\t\t\t\tTransitionProbabilities.INSTANCE.data::get);\r\n\t}\r\n\r\n\tprivate ReachableStateFinder<MedicalState, Symptom> reachableStatesFinder() {\r\n\t\treturn observation -> asList(MedicalState.values());\r\n\t}\r\n\r\n\tprivate enum StartProbabilities {\r\n\t\tINSTANCE;\r\n\r\n\t\tpublic final Map<MedicalState, Double> data;\r\n\r\n\t\tStartProbabilities() {\r\n\t\t\tdata = new HashMap<>();\r\n\t\t\tdata.put(MedicalState.HEALTHY, 0.6);\r\n\t\t\tdata.put(MedicalState.FEVER, 0.4);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate enum TransitionProbabilities {\r\n\t\tINSTANCE;\r\n\r\n\t\tpublic final Map<Transition<MedicalState>, Double> data;\r\n\r\n\t\tTransitionProbabilities() {\r\n\t\t\tdata = new HashMap<>();\r\n\t\t\tdata.put(new Transition<>(MedicalState.HEALTHY, MedicalState.HEALTHY), 0.7);\r\n\t\t\tdata.put(new Transition<>(MedicalState.HEALTHY, MedicalState.FEVER), 0.3);\r\n\t\t\tdata.put(new Transition<>(MedicalState.FEVER, MedicalState.HEALTHY), 0.4);\r\n\t\t\tdata.put(new Transition<>(MedicalState.FEVER, MedicalState.FEVER), 0.6);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate enum EmissionProbabilities {\r\n\t\tINSTANCE;\r\n\r\n\t\tpublic final Map<Emission<MedicalState, Symptom>, Double> data;\r\n\r\n\t\tEmissionProbabilities() {\r\n\t\t\tdata = new HashMap<>();\r\n\t\t\tdata.put(new Emission<>(MedicalState.HEALTHY, Symptom.NORMAL), 0.5);\r\n\t\t\tdata.put(new Emission<>(MedicalState.HEALTHY, Symptom.COLD), 0.4);\r\n\t\t\tdata.put(new Emission<>(MedicalState.HEALTHY, Symptom.DIZZY), 0.1);\r\n\t\t\tdata.put(new Emission<>(MedicalState.FEVER, Symptom.NORMAL), 0.1);\r\n\t\t\tdata.put(new Emission<>(MedicalState.FEVER, Symptom.COLD), 0.3);\r\n\t\t\tdata.put(new Emission<>(MedicalState.FEVER, Symptom.DIZZY), 0.6);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n","google":"UA-72515602-1","note":"Don't delete this file! It's used internally to help with page regeneration."}